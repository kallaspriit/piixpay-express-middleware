// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`middleware should handle overpayment 1`] = `"OK"`;

exports[`middleware should handle overpayment 2`] = `
Array [
  Object {
    "amount": Object {
      "coin": 0.0006825537886513146,
      "eur": 5,
    },
    "amountStatus": "OVERPAID",
    "coin": "BTC",
    "createdDate": 1970-01-01T00:00:00.000Z,
    "description": "Test payment",
    "due": Object {
      "coin": 0.0043,
      "eur": 30.05,
    },
    "fees": Object {
      "bank": Object {
        "coin": 0.0035,
        "eur": 25,
      },
      "service": Object {
        "coin": 0.0001,
        "eur": 0.05,
      },
      "total": Object {
        "coin": 0.0036,
        "eur": 25.05,
      },
    },
    "isComplete": true,
    "isPaid": true,
    "payer": Object {
      "document": "019ae981-713f-4eb8-860f-c11d48f29a1c",
      "email": "test@example.com",
      "name": "John Rambo",
    },
    "paymentStatus": "FULL",
    "paymentUrl": "bitcoin://iURIGqIuMNu2W2H89jOqqXmbu3RmdBz5?amount=0.00430000",
    "rate": 7325.43,
    "received": Object {
      "coin": 0.0086,
      "eur": 62.998698000000005,
    },
    "receiver": Object {
      "address": null,
      "iban": "DA12345EFAEJBF242424524",
      "name": "Dag University",
    },
    "transactionKey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "updatedDate": 1970-01-01T00:00:00.000Z,
  },
]
`;

exports[`middleware should handle underpayment 1`] = `"OK"`;

exports[`middleware should handle underpayment 2`] = `
Array [
  Object {
    "amount": Object {
      "coin": 0.0006825537886513146,
      "eur": 5,
    },
    "amountStatus": "UNDERPAID",
    "coin": "BTC",
    "createdDate": 1970-01-01T00:00:00.000Z,
    "description": "Test payment",
    "due": Object {
      "coin": 0.0043,
      "eur": 30.05,
    },
    "fees": Object {
      "bank": Object {
        "coin": 0.0035,
        "eur": 25,
      },
      "service": Object {
        "coin": 0.0001,
        "eur": 0.05,
      },
      "total": Object {
        "coin": 0.0036,
        "eur": 25.05,
      },
    },
    "isComplete": true,
    "isPaid": true,
    "payer": Object {
      "document": "019ae981-713f-4eb8-860f-c11d48f29a1c",
      "email": "test@example.com",
      "name": "John Rambo",
    },
    "paymentStatus": "FULL",
    "paymentUrl": "bitcoin://iURIGqIuMNu2W2H89jOqqXmbu3RmdBz5?amount=0.00430000",
    "rate": 7325.43,
    "received": Object {
      "coin": 0.00215,
      "eur": 15.749674500000001,
    },
    "receiver": Object {
      "address": null,
      "iban": "DA12345EFAEJBF242424524",
      "name": "Dag University",
    },
    "transactionKey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "updatedDate": 1970-01-01T00:00:00.000Z,
  },
]
`;

exports[`middleware should handle valid payment updates 1`] = `"OK"`;

exports[`middleware should handle valid payment updates 2`] = `
Array [
  Object {
    "amount": Object {
      "coin": 0.0006825537886513146,
      "eur": 5,
    },
    "amountStatus": "EXACT",
    "coin": "BTC",
    "createdDate": 1970-01-01T00:00:00.000Z,
    "description": "Test payment",
    "due": Object {
      "coin": 0.0043,
      "eur": 30.05,
    },
    "fees": Object {
      "bank": Object {
        "coin": 0.0035,
        "eur": 25,
      },
      "service": Object {
        "coin": 0.0001,
        "eur": 0.05,
      },
      "total": Object {
        "coin": 0.0036,
        "eur": 25.05,
      },
    },
    "isComplete": true,
    "isPaid": true,
    "payer": Object {
      "document": "019ae981-713f-4eb8-860f-c11d48f29a1c",
      "email": "test@example.com",
      "name": "John Rambo",
    },
    "paymentStatus": "FULL",
    "paymentUrl": "bitcoin://iURIGqIuMNu2W2H89jOqqXmbu3RmdBz5?amount=0.00430000",
    "rate": 7325.43,
    "received": Object {
      "coin": 0.0043,
      "eur": 31.499349000000002,
    },
    "receiver": Object {
      "address": null,
      "iban": "DA12345EFAEJBF242424524",
      "name": "Dag University",
    },
    "transactionKey": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "updatedDate": 1970-01-01T00:00:00.000Z,
  },
]
`;

exports[`middleware should provide qr code rendering 1`] = `
Object {
  "data": Array [
    137,
    80,
    78,
    71,
    13,
    10,
    26,
    10,
    0,
    0,
    0,
    13,
    73,
    72,
    68,
    82,
    0,
    0,
    0,
    164,
    0,
    0,
    0,
    164,
    8,
    0,
    0,
    0,
    0,
    60,
    222,
    218,
    157,
    0,
    0,
    1,
    231,
    73,
    68,
    65,
    84,
    120,
    218,
    237,
    220,
    209,
    174,
    131,
    32,
    16,
    132,
    97,
    223,
    255,
    165,
    219,
    219,
    198,
    192,
    206,
    140,
    104,
    211,
    178,
    191,
    55,
    237,
    49,
    70,
    62,
    19,
    22,
    151,
    133,
    158,
    227,
    245,
    7,
    199,
    1,
    18,
    36,
    72,
    144,
    32,
    65,
    130,
    4,
    9,
    242,
    111,
    144,
    71,
    113,
    156,
    175,
    251,
    188,
    126,
    244,
    253,
    124,
    238,
    74,
    59,
    32,
    65,
    142,
    46,
    26,
    157,
    255,
    252,
    187,
    106,
    160,
    194,
    59,
    237,
    128,
    4,
    121,
    238,
    240,
    206,
    205,
    207,
    224,
    89,
    64,
    85,
    215,
    149,
    247,
    7,
    9,
    82,
    32,
    213,
    249,
    209,
    224,
    12,
    18,
    228,
    211,
    72,
    39,
    184,
    212,
    11,
    0,
    36,
    200,
    59,
    18,
    140,
    81,
    0,
    84,
    131,
    246,
    116,
    114,
    245,
    100,
    22,
    4,
    114,
    59,
    164,
    26,
    148,
    239,
    250,
    124,
    108,
    182,
    8,
    114,
    43,
    100,
    210,
    225,
    103,
    73,
    67,
    21,
    116,
    95,
    169,
    170,
    129,
    220,
    10,
    89,
    117,
    236,
    89,
    163,
    170,
    176,
    85,
    37,
    193,
    206,
    11,
    0,
    100,
    111,
    164,
    211,
    168,
    83,
    136,
    170,
    38,
    98,
    234,
    129,
    64,
    130,
    188,
    146,
    244,
    38,
    141,
    204,
    6,
    244,
    229,
    232,
    6,
    217,
    2,
    233,
    128,
    221,
    130,
    189,
    91,
    36,
    88,
    74,
    122,
    65,
    110,
    143,
    84,
    69,
    250,
    217,
    53,
    234,
    101,
    144,
    20,
    23,
    64,
    130,
    76,
    38,
    79,
    135,
    113,
    168,
    66,
    105,
    21,
    76,
    32,
    65,
    170,
    65,
    186,
    234,
    220,
    179,
    130,
    124,
    53,
    120,
    171,
    135,
    141,
    39,
    98,
    32,
    91,
    32,
    221,
    34,
    128,
    194,
    86,
    201,
    240,
    210,
    98,
    19,
    200,
    86,
    72,
    103,
    33,
    73,
    37,
    5,
    42,
    25,
    113,
    38,
    117,
    32,
    65,
    186,
    133,
    123,
    53,
    209,
    82,
    9,
    137,
    211,
    14,
    72,
    144,
    179,
    155,
    186,
    197,
    121,
    39,
    96,
    20,
    42,
    74,
    48,
    64,
    182,
    66,
    58,
    88,
    171,
    179,
    139,
    132,
    120,
    121,
    177,
    9,
    100,
    59,
    164,
    42,
    90,
    37,
    139,
    155,
    233,
    203,
    1,
    36,
    200,
    100,
    193,
    168,
    26,
    132,
    147,
    201,
    214,
    82,
    193,
    10,
    100,
    59,
    100,
    218,
    128,
    139,
    77,
    3,
    19,
    36,
    72,
    119,
    130,
    228,
    116,
    122,
    103,
    147,
    168,
    93,
    240,
    2,
    9,
    210,
    8,
    24,
    119,
    83,
    188,
    179,
    145,
    78,
    46,
    168,
    130,
    108,
    141,
    116,
    147,
    96,
    119,
    163,
    136,
    26,
    216,
    213,
    15,
    141,
    64,
    130,
    116,
    127,
    56,
    225,
    20,
    15,
    174,
    12,
    234,
    113,
    85,
    13,
    100,
    11,
    164,
    147,
    156,
    166,
    5,
    213,
    228,
    97,
    65,
    130,
    76,
    22,
    203,
    151,
    55,
    125,
    24,
    1,
    9,
    18,
    100,
    138,
    76,
    240,
    85,
    240,
    184,
    15,
    7,
    18,
    164,
    131,
    81,
    147,
    45,
    85,
    128,
    189,
    101,
    231,
    0,
    200,
    86,
    72,
    21,
    4,
    206,
    194,
    123,
    90,
    72,
    0,
    9,
    242,
    181,
    248,
    143,
    17,
    156,
    192,
    113,
    147,
    229,
    203,
    187,
    89,
    64,
    110,
    143,
    252,
    197,
    3,
    36,
    72,
    144,
    32,
    65,
    130,
    4,
    9,
    18,
    228,
    207,
    30,
    111,
    55,
    233,
    62,
    140,
    96,
    72,
    193,
    218,
    0,
    0,
    0,
    0,
    73,
    69,
    78,
    68,
    174,
    66,
    96,
    130,
  ],
  "type": "Buffer",
}
`;

exports[`middleware should return bad request if the transaction key does not have correct format 1`] = `"Expected request body to include 'transaction_key' with a string value of 32 characters"`;

exports[`middleware should return bad request if the transaction key is missing 1`] = `"Expected request body to include 'transaction_key' with a string value of 32 characters"`;

exports[`middleware should return internal error if the remote api fails, includes error data if a string is provided 1`] = `"Fetching invoice \\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\" info failed (remote error message)"`;

exports[`middleware should return internal error if the remote api fails, uses error if no data is provided 1`] = `"Fetching invoice \\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\" info failed (Request failed with status code 500)"`;

exports[`middleware should return not found if the invoice could not be found 1`] = `"Invoice \\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\" could not be found (Request failed with status code 404)"`;
